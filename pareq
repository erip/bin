#!/usr/bin/env python3

"""
Checks that two or more files have the same number of lines.
"""

import sys
import gzip
from itertools import zip_longest

def smart_open(filepath, mode='rt', encoding='utf-8'):
    """Convenience function for reading compressed or plain text files.
    :param filepath: The file to read.
    :param mode: The file mode (read, write).
    :param encoding: The file encoding.
    """
    if filepath.endswith('.gz'):
        return gzip.open(filepath, mode=mode, encoding=encoding, newline="\n")
    return open(filepath, mode=mode, encoding=encoding, newline="\n")


def count_lines(filename):
    line_count = 0
    with smart_open(file) as infh:
        for line in infh:
            line_count += 1
    return line_count


def main(args):
    try:
        for linecount, lines in enumerate(zip_longest(*list(map(smart_open, args.files))), 1):
            if None in lines:
                if not args.quiet:
                    print(f"Failure: files are NOT of equal length", file=sys.stderr)
                    for file in args.files:
                        print("->", count_lines(file), file)
                sys.exit(1)
    except FileNotFoundError as e:
        if not args.quiet:
            print(f"Failure: {e}", file=sys.stderr)
        sys.exit(1)

    if not args.quiet:
        print(f"Success: all files have {linecount} lines", file=sys.stderr)

    sys.exit(0)

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser("Utility to test line-parallelism of two or more files")
    parser.add_argument("files", nargs="+", help="List of file paths (plain text or .gz)")
    parser.add_argument("--quiet", "-q", action="store_true")
    args = parser.parse_args()

    main(args)
