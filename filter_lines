#!/usr/bin/env python3

"""
Filters lines out of STDIN. Works by taking a list of lines numbers to keep as the script's first
argument. Then walks through STDIN, keeping only line numbers that were found in the list that
was read in.

Usage:

    cat unfiltered_file | ./filter_lines.py [--reverse|-r] list_of_lines
"""

import argparse
import typing
import sys

def check(last_line: int, current_line: int):
    if current_line <= last_line:
        print('* FATAL: current line (%d) less than or equal to the last line (%d)' % (current_line, last_line), file=sys.stderr)
        sys.exit(1)
    return current_line

def get_next_line(filestream, lines):
    """
    Returns the next line to keep.
    """
    last_line = 0
    if filestream is not None:
        for line in filestream:
            yield check(last_line, int(line.rstrip()))
    elif len(lines) > 0:
        for line in lines:
            yield check(last_line, line)
    else:
        yield ''



def main():


    parser = argparse.ArgumentParser()
    parser.add_argument('--file', '-f', type=argparse.FileType('r', encoding='utf-8'), default=None,
                        help="File containing sorted (low to high) line numbers to keep (counting from 1)")
    parser.add_argument('--lines', '-l', type=int, nargs='+', default=[],
                        help='List of line numbers to keep.')
    parser.add_argument('--remove', '-r', action='store_true',
                        help='Remove specified lines instead of keeping them')
    args = parser.parse_args()

    lines_stream = get_next_line(args.file, args.lines)

    next_line_to_keep = next(lines_stream)
    for i, line in enumerate(sys.stdin, 1):
        if i == next_line_to_keep:
            if not args.remove:
                print(line, end='', flush=True)
            try:
                next_line_to_keep = next(lines_stream)
            except StopIteration:
                next_line_to_keep = 0
        elif args.remove:
            print(line, end='', flush=True)

if __name__ == "__main__":
    main()
