#!/usr/bin/perl -w

# Put these in your .bashrc
# 
# # print the saved commands
# alias p="philog"
# alias pp="philog -pretty"
# alias ppd="philog -pretty -dir"
# alias pd="philog -dir"
#
# # edit the command cache
# alias pe="vi .philog.LOGFILE"
#
# # save the last command
# alias ph="history | philog -history"

use strict;
use warnings;

# Save logfile in directory instead of globally
my $logfile = "./.philog.LOGFILE";

my $date = chomp(`date +"%Y-%m-%d %H:%M"`)
my $pwd = `pwd`; chop($pwd);
my $pretty = 0; 
my $curdir = 0;
my $clean = 0;
my $history = 0;
foreach (@ARGV) {
	$pretty = 1 if /^-pretty$/;
	$curdir = 1 if /^-dir$/;
	$clean = 1 if /^-clean$/;
	$history = 1 if /^-history$/;
}

if ($history) {
  my @cmd = <STDIN>;
  my $last = 1;
  $last = $ARGV[1] if $#ARGV>0 && $ARGV[1] =~ /^\d+$/;
  my $cmd =  $cmd[$#cmd-$last];
  $cmd =~ s/^\s*\d+\s*//;
  $cmd =~ s/^[\d\-]+ [\d\:]+\s*//;
  chomp($cmd);
  &log($cmd);
}
elsif ($#ARGV-$pretty-$clean == -1) {
	open(LOG,$logfile);
	while(<LOG>) {
    if (! /^\d{4}/) { # convert old format to new
      close(LOG);
      upgrade_log($logfile)
      open(LOG, $logfile)
    }
		my ($time,$dir,$cmd) = ($1,$2,$3);
		if ($pretty) {
	    print "\e[32m$time \e[34m$dir ".($cmd=~/^[\#\^]/?"\e[30;1m":"\e[m").$cmd."\e[m\n";
		}
		elsif ($clean) {
	    print "$cmd\n";
		}
		else {
	    print "$time $dir $cmd\n";
		}
	}
	close(LOG);	
}
elsif ($curdir) {
  if (!	open(LOG,$logfile)) {
    print "No logfile found in current directory.\n";
    exit 0;
  }
	while(<LOG>) {
		/^(... ... .. ..:..:.. ....? 20..) (\S+) (.+)$/;
		my ($time,$dir,$cmd) = ($1,$2,$3);
		if ($pretty) {
	    print "\e[32m$time ".($cmd=~/^[\#\^]/?"\e[30;1m":"\e[m").$cmd."\e[m\n";
		}
		elsif ($clean) {
	    print "$cmd\n";
		}
		else {
	    print "$1 $3\n";
		}
	}
	close(LOG);
}
else {
	my $cmd;
	foreach (@ARGV) { $cmd .= "$_ "; }
	chop($cmd);
	&log($cmd);
}

sub log {
	my ($cmd) = @_;
	open(LOG,">>$logfile");
	print LOG "$date $pwd $cmd\n";
	close(LOG);
}

sub same_dir {
	my ($a,$b) = @_;
	$a =~ s/nfs\/[^\/]+/nfs/;
	$b =~ s/nfs\/[^\/]+/nfs/;
	return $a eq $b;
}

def upgrade_log($file) {
  my @entries = chomp(`cat $file`);
  system("cp $file $file.old");
  open(LOG, ">$file");
  while(<LOG>) {
    /^(...) (...) (.). (..:..:..) (..T) (20..) (\S+) (.+)$/;
    
  }
  close(LOG);
}
